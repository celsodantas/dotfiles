set nocompatible               " be iMproved
filetype off                   " required!

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'L9' " this includes helpers that other plugings might need

Plugin 'tpope/vim-sensible'
Plugin 'sheerun/vim-polyglot'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-eunuch'
Plugin 'powerline/powerline'
Plugin 'FuzzyFinder'
Plugin 'tpope/vim-commentary'
Plugin 'vim-misc' " required by the easytags
Plugin 'xolox/vim-easytags'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'junegunn/fzf'
Plugin 'junegunn/fzf.vim'
Plugin 'tpope/vim-vinegar'
Plugin 'airblade/vim-gitgutter'
Plugin 'benmills/vimux' " allows vim to open a tmux panel and run commands on it (useful for tests)

Plugin 'k0kubun/vim-open-github' " opens current file in github with OpenGithub

" Plugin 'ervandew/supertab'
:

call vundle#end()            " required
filetype plugin indent on    " required

"
" PERSONAL Vim configs
"

let g:VimuxHeight = "40"
let g:VimuxOrientation = "h"

set colorcolumn=120             " adds a line at the column to mark max line
set encoding=utf-8

set autoread | au CursorHold * checktime " auto reloads the file when changed

let g:Powerline_symbols = 'fancy'

autocmd StdinReadPre * let s:std_in=1

syntax enable
set tabstop=2

set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set gcr=a:blinkon0              "Disable cursor blink
set visualbell                  "No sounds
set autoread                    "Reload files changed outside vim
set ignorecase                      " Case insensitive search
set smartcase                       " Case sensitive when uc present


" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

set laststatus=2                "It enabled powerline to be present always

" Go to last buffer that exists. Just like spacemacs
noremap <Space><Tab> :b#<CR>

" disabling record mode - I never use this shit anyway
map q <Nop>

" ================ Search Settings  =================

set incsearch        "Find the next match as we type the search
set hlsearch         "Hilight searches by default
set viminfo='100,f1  "Save up to 100 marks, enable capital marks

" ================ Turn Off Swap Files ==============

set noswapfile
"set nobackup  "why disable it?
set nowb

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" =============== COPY Support ======================
" Allow yank to copy to Mac's clipboard 

" commeting out as this doesnt seems to be working
" vmap '' :w ! pbcopy<CR><CR>

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.

silent !mkdir ~/.vim-tmp/backups > /dev/null 2>&1
set undodir=~/.vim-tmp/backups
set undofile

" === file browser configs
" Do not set netrw as the alternate buffer (#b)! Used also by vim vinegar.
let g:netrw_altfile = 1

" === VimuxConfig ====

let g:VimuxOrientation = "h"
let g:VimuxHeight = "40"

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points

" Disable new commented line
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" ================ Completion =======================

set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

let g:neocomplcache_enable_at_startup = 1

" ================ Scrolling ========================

set scrolloff=8         "Start scrolling when we're 8 lines away from margin
set sidescrolloff=15
set sidescroll=1

" ================ Split ============================
" Open new split panes to right and bottom, which feels more natural than Vimâ€™s default:
set splitbelow
set splitright

" ================  Mouse  ==========================

" mouse support
set mouse=a
set ttymouse=xterm2 " allows click and drag of mouse inside tmux

" ================ Copy Clipboard ===================

set clipboard=unnamed

" ================ Colors  ==========================

set t_Co=256 " 256 colors
set background=dark
colorscheme monokai

set cursorline

" =============== Make Vim faster ==================
" Make vim fast.
set synmaxcol=300
set ttyfast
set ttyscroll=3
set lazyredraw

" =============== Ctrlp =============================
" 'c' - the directory of the current file.
" 'r' - the nearest ancestor that contains one of these directories or files: .git .hg .svn .bzr _darcs
" 'a' - like c, but only if the current working directory outside of CtrlP is not a direct ancestor of the directory of the current file. 0 or '' (empty string) - disable this feature.
let g:ctrlp_working_path_mode = 'r'
"let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|sorbet'
let g:ctrlp_custom_ignore = '\v[\/]\.(DS_Storegit|hg|svn|optimized|compiled|node_modules)$' 

" ================ Loading Externals ================

source ~/.vim/keymaps.vim

" Fuzzyfinder  https://github.com/junegunn/fzf
set rtp+=~/.fzf

" The Silver Searcher
if executable('rg')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  " let g:ctrlp_user_command = 'rg --files --smart-case %s'

  " " ag is fast enough that CtrlP doesn't need to cache
  " let g:ctrlp_use_caching = 0

  " set grepprg=rg\ --vimgrep\ --no-heading
  " set grepformat=%f:%l:%c:%m,%f:%l:%m

  nmap <Leader>\ :Rg 
endif

" bind \ (backward slash) to grep shortcut
"command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
"nnoremap \ :Ag<SPACE>

" setting ctags path
set tags=tags

" triggers the find with the word unde the cursor
:nnoremap <Leader>f :/\<<C-r><C-w>\>/
:vnoremap <Leader>f :call CWDSearchAndReplaceVisual()<CR>

map 0 ^

" copy current file path
nnoremap <Leader>cf :let @+ = expand("%")<CR>

if !has('nvim')
	if exists('$TMUX')
		let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
		let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
	else
		let &t_SI = "\<Esc>]50;CursorShape=1\x7"
		let &t_EI = "\<Esc>]50;CursorShape=0\x7"
	endif
endif

"""""""""""""""""""""""""""""""
" => FUGITIVE
"""""""""""""""""""""""""""""""
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>
nnoremap <silent> <leader>gr :Gread<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>ge :Gedit<CR>
nnoremap <silent> <leader>gi :Git add -p %<CR>
" Auto clean fugitive buffers
autocmd BufReadPost fugitive://* set bufhidden=delete
" Navigate to the current git object
autocmd FileType git nnoremap <buffer> <leader>gb :Gbrowse<cr>
" Navigate to current commit hash under the cursor inside the blame window
autocmd FileType fugitiveblame nnoremap <buffer> <leader>gb :execute ":Gbrowse " . expand("<cword>")<cr>

" FZF config
let $FZF_DEFAULT_COMMAND = 'rg --ignore-case --files'
let $FZF_DEFAULT_OPTS = "-i --preview 'bat -n --color=always {}'"

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --ignore-case --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Global line completion (not just open buffers. ripgrep required.)
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
  \ 'prefix': '^.*$',
  \ 'source': 'rg -n ^ --color always',
  \ 'options': '--ansi --delimiter : --nth 3..',
  \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))

" :FormatJSON command is available to format pretty format JSON content
com! FormatJSON %!python -m json.tool
