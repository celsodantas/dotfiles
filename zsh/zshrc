# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh
ZSH_THEME="dantas"
DISABLE_AUTO_UPDATE=true # disables ZSH autoupdate

plugins=(git osx)

source $ZSH/oh-my-zsh.sh
source ~/.dotfiles/alias.sh
source ~/.dotfiles/export.sh
source ~/.dotfiles/vendor/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

# It will enable to use cd -1, cd -2 to go back to previous folders
setopt AUTO_PUSHD

# Init the fasd
eval "$(fasd --init auto)"

# It will do a ls after a cd
function chpwd() {
    emulate -L zsh
    ls
}

# Enables the edition of command lines!
# press cltr+e to open the editor and fix any command line errors
autoload edit-command-line
zle -N edit-command-line
bindkey '^E' edit-command-line

# commenting this out to avoid conflict with chruby used by shopify dev
#export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# commenting this out to avoid conflict with npm added by shopify dev
#export NVM_DIR=~/.nvm
#source $(brew --prefix nvm)/nvm.sh

[ -f /opt/dev/dev.sh ] && source /opt/dev/dev.sh


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Booking proxy
function proxy () {
    local PROXYADDR="http://webproxy.corp.booking.com:3128"
    local OPTION="$1"
    if [[ $OPTION == "0"  || $OPTION == "off" ||  $OPTION == "no" ]]; then
        unset http_proxy
        unset https_proxy
        unset HTTP_PROXY
        unset HTTPS_PROXY
        unset no_proxy

        printf "Proxy off\n"
    elif [[ $OPTION == "1" ||  $OPTION == "on" || $OPTION == "yes" ]]; then
        export http_proxy="$PROXYADDR"
        export https_proxy="$PROXYADDR"
        export HTTP_PROXY="$PROXYADDR"
        export HTTPS_PROXY="$PROXYADDR"
        export no_proxy="localhost,127.0.0.1"

        printf "Proxy configured to $PROXYADDR\n"
    else
        printf "http_proxy=$http_proxy\n"
        printf "https_proxy=$https_proxy\n"
        printf "HTTP_PROXY=$HTTP_PROXY\n"
        printf "HTTPS_PROXY=$HTTPS_PROXY\n"
        printf "Please use 0/1, on/off, yes,no\n"
    fi
}

# enabling proxy when in booking's wifi
/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | grep 'BK-WIFI' &> /dev/null
if [ $? = 0 ]; then
  proxy on
fi

# setting up perl env
eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"
export PATH="$HOME/perl5/bin:$PATH"
eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"
export PATH="$HOME/perl5/bin:$PATH"

# overwriting git command to allow hook on `git status`
git()
{
  if [[ $# -ge 1 && "$1" == "status" ]] then
      # storing the last git status output into a file to be later
      # read by other ruby command
      command git $@ > .git_status_cache
      cat .git_status_cache
   else
      command git $@
   fi
}

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

